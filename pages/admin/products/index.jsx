import Head from 'next/head';
// import Image from 'next/image';
import Link from 'next/link';
import { QueryClient, dehydrate } from '@tanstack/react-query';
import { getSession, withPageAuthRequired } from '@auth0/nextjs-auth0';
import Layout from '@/components/Layout';
import Heading from '@/components/Heading';
// import Paragraph from '@/components/Paragraph';
import { QueryBoundary } from '@/components/QueryBoundary';
import ProductList from '@/components/ProductList';
import { getProductsFromDB } from '@/lib/api-functions/server/products/queries';
import { STORAGE_KEY } from '@/lib/tq/products/settings';
import { Button } from '@/components/mui';
import { useRemoveProduct } from '@/lib/tq/products/mutations';
import { checkPermission } from '@/lib/utils';

import permissions from '@/lib/api-functions/server/permissions';

const {
  identifier,
  permissions: {
    products: {
      create: createProduct,
      update: updateProduct,
      remove: removeProduct,
    },
  },
} = permissions;

console.log('identifier', identifier);

export default function AdminProductList({ user }) {
  // product removal function
  const removeMutation = useRemoveProduct();

  const removeHandler = (id) => {
    removeMutation.mutate(id);
  };

  // admin permissions to be prop drilled for rbac button interfaces
  const userProductPermissions = {
    canAdd: checkPermission(user, identifier, createProduct),
    canUpdate: checkPermission(user, identifier, updateProduct),
    canRemove: checkPermission(user, identifier, removeProduct),
  };

  console.log('userproductpermissions', userProductPermissions);

  return (
    <>
      <Head>
        <title>Commerce App</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <Layout>
        <Heading component="h2">Products Admin</Heading>
        {userProductPermissions.canAdd && (
          <Button
            variant="contained"
            component={Link}
            href="/admin/products/add"
            aria-label="create product"
          >
            Add Product
          </Button>
        )}
        <QueryBoundary>
          <ProductList
            removeHandler={removeHandler}
            userProductPermissions={userProductPermissions}
          />
        </QueryBoundary>
      </Layout>
    </>
  );
}

export const getServerSideProps = withPageAuthRequired({
  async getServerSideProps(context) {
    const products = await getProductsFromDB().catch((err) => console.log(err));
    const queryClient = new QueryClient();

    await queryClient.setQueryData(
      [STORAGE_KEY],
      JSON.parse(JSON.stringify(products)),
    );

    const session = await getSession(context.req, context.res);

    return {
      props: {
        dehydratedState: dehydrate(queryClient),
        user: session.user,
      },
    };
  },
});
